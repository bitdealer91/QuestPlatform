import fs from "node:fs/promises";
import path from "node:path";
import { TaskSpecZ, Task } from "./taskSpec";

const FILE = path.join(process.cwd(), "data", "tasks.json");
let CACHE: { tasks: Task[]; programStart?: string; weeks?: number } | null = null;
let LAST_MODIFIED: number = 0;
let CACHE_TIMESTAMP: number = 0;

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const CACHE_TTL = 10 * 60 * 1000; // 10 minutes

async function readFileStore(){
  try {
    const buf = await fs.readFile(FILE, "utf8");
    return JSON.parse(buf);
  } catch { 
    console.warn('‚ö†Ô∏è Failed to read tasks.json, using default');
    return { tasks: [], programStart: undefined, weeks: 8 }; 
  }
}

async function shouldRefreshCache(): Promise<boolean> {
  if (!CACHE) return true;
  // Fast path: trust in-memory cache for a short window to avoid frequent fs.stat on hot paths
  if (Date.now() - CACHE_TIMESTAMP < 30000) { // 30s
    return false;
  }
  
  try {
    const stats = await fs.stat(FILE);
    const fileModified = stats.mtime.getTime();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –∏—Å—Ç–µ–∫ –∫–µ—à
    if (fileModified > LAST_MODIFIED || Date.now() - CACHE_TIMESTAMP > CACHE_TTL) {
      return true;
    }
    
    return false;
  } catch {
    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –µ—â–µ 5 –º–∏–Ω—É—Ç
    if (Date.now() - CACHE_TIMESTAMP > 5 * 60 * 1000) {
      return true;
    }
    return false;
  }
}

async function loadTasksWithCache(){
  if (await shouldRefreshCache()) {
    console.log('üîÑ Refreshing tasks cache...');
    const startTime = Date.now();
    
    CACHE = await readFileStore();
    LAST_MODIFIED = Date.now();
    CACHE_TIMESTAMP = Date.now();
    
    const loadTime = Date.now() - startTime;
    console.log(`‚úÖ Tasks cache refreshed in ${loadTime}ms (${CACHE!.tasks.length} tasks)`);
  }
  return CACHE!;
}

async function writeFileStore(data: unknown){
  try {
    await fs.mkdir(path.dirname(FILE), { recursive: true });
    await fs.writeFile(FILE, JSON.stringify(data, null, 2), "utf8");
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø—Ä–∏ –∑–∞–ø–∏—Å–∏
    CACHE = null;
    LAST_MODIFIED = 0;
    CACHE_TIMESTAMP = 0;
  } catch (error) {
    console.error('‚ùå Failed to write tasks file:', error);
    throw error;
  }
}

export async function loadTasks(){
  if (process.env.SOMNIA_KV_URL){
    // TODO: implement KV later if provided; for now fall back to file
  }
  return await loadTasksWithCache();
}

export async function saveTasks(spec: unknown){
  const parsed = TaskSpecZ.parse(spec);
  const data = { tasks: parsed.tasks, programStart: parsed.programStart, weeks: parsed.weeks ?? 8 };
  CACHE = data;
  LAST_MODIFIED = Date.now();
  CACHE_TIMESTAMP = Date.now();
  await writeFileStore(data);
  return data;
}

export async function getWeeksSummary(){
  const { tasks, weeks = 8 } = await loadTasks();
  const result = Array.from({ length: weeks }, (_, i) => ({ 
    id: i+1, 
    title: `Week ${i+1}`, 
    tasks: 0 
  }));
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ç–∞—Å–∫–æ–≤ –ø–æ –Ω–µ–¥–µ–ª—è–º
  const weekCounts = new Map<number, number>();
  tasks.forEach(t => {
    if (t.week && t.week > 0 && t.week <= weeks) {
      weekCounts.set(t.week, (weekCounts.get(t.week) || 0) + 1);
    }
  });
  
  result.forEach(week => {
    week.tasks = weekCounts.get(week.id) || 0;
  });
  
  return result;
}

export async function getWeekTasks(id: number){
  const { tasks } = await loadTasks();
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  return tasks.filter(t => t.week === id);
}

export async function findTask(id: string){
  const { tasks } = await loadTasks();
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  return tasks.find(t => t.id === id);
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
export async function preloadCache() {
  try {
    console.log('üöÄ Preloading tasks cache...');
    const startTime = Date.now();
    
    await loadTasksWithCache();
    
    const preloadTime = Date.now() - startTime;
    console.log(`‚úÖ Tasks cache preloaded in ${preloadTime}ms`);
  } catch (error) {
    console.error('‚ùå Failed to preload tasks cache:', error);
  }
}
